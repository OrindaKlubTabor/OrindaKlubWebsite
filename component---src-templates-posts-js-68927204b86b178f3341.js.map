{"version":3,"sources":["webpack:///./src/templates/posts.js"],"names":["BlogList","render","posts","this","props","data","allContentfulPost","nodes","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","startCountIndex","endCountIndex","map","node","className","to","slug","style","margin","key","title","createdAt","description","thumbnail","srcset","fixed","srcSetWebp","type","srcSet","src","alt","display","justifyContent","color","rel","Array","from","length","_","i","padding","backgroundColor","borderRadius","React","Component"],"mappings":"oNAKqBA,E,kGACnBC,OAAA,WACE,IAAMC,EAAQC,KAAKC,MAAMC,KAAKC,kBAAkBC,MAChD,EAAkCJ,KAAKC,MAAMI,YAArCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EACJJ,EAAc,GAAM,EAAI,QAAU,UAAYA,EAAc,GAAGK,WAC3DC,EAAW,UAAYN,EAAc,GAAGK,WACxCE,EAAkBN,EAAW,EAAID,EAAc,EAAI,EAAIG,EAAS,EAChEK,EAAgBP,EAAW,EAAID,EAAc,EAAIE,EAAUD,EACjE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,iDACCR,EAAMgB,KAAI,SAAAC,GAAI,OACb,kBAAC,IAAD,CAAMC,UAAU,YAAYC,GAAE,IAAMF,EAAKG,MACvC,yBACEF,UAAU,OACVG,MAAO,CAAEC,OAAQ,UACjBC,IAAKN,EAAKG,MAEV,wBAAIC,MAAO,CAAEC,OAAQ,WAAaL,EAAKO,OACvC,yBAAKN,UAAU,kBACb,yBAAKA,UAAU,uBACb,2BACE,gCAASD,EAAKQ,WADhB,MACuCR,EAAKS,aAE5C,kBAAC,IAAD,CACER,UAAU,2BACVC,GAAE,IAAMF,EAAKG,MAFf,yBAQiB,MAAlBH,EAAKU,WACJ,iCACE,4BACEC,OAAQX,EAAKU,UAAUE,MAAMC,WAC7BC,KAAK,eAEP,4BACEH,OAAQX,EAAKU,UAAUE,MAAMG,OAC7BD,KAAK,eAEP,yBAAKE,IAAKhB,EAAKU,UAAUE,MAAMI,IAAKC,IAAKjB,EAAKO,eAO1D,yBAAKH,MAAO,CAAEc,QAAS,OAAQC,eAAgB,kBAC5C3B,EACC,0BAAMY,MAAO,CAAEgB,MAAO,gBAAtB,eAEA,kBAAC,IAAD,CAAMlB,GAAIR,EAAU2B,IAAI,QAAxB,eAIF,6BACGC,MAAMC,KACL,CAAEC,OAAQjC,IACV,SAACkC,EAAGC,GAAJ,OACE7B,GAAmB6B,GACnB5B,EAAgB4B,IACfpC,IAAgBoC,EAAI,EACnB,kBAAC,IAAD,CACEtB,MAAO,CACLuB,QAAS,SACTC,gBAAiB,UACjBR,MAAO,OACPS,aAAc,GAEhBvB,IAAG,qBAAsBoB,EAAI,GAC7BxB,GAAa,IAANwB,EAAU,QAAU,UAAYA,EAAI,IAE1CA,EAAI,GAGP,kBAAC,IAAD,CACEtB,MAAO,CAAEuB,QAAS,UAClBrB,IAAG,qBAAsBoB,EAAI,GAC7BxB,GAAa,IAANwB,EAAU,QAAU,UAAYA,EAAI,IAE1CA,EAAI,QAKdjC,EACC,0BAAMW,MAAO,CAAEgB,MAAO,gBAAtB,WAEA,kBAAC,IAAD,CAAMlB,GAAIN,EAAUyB,IAAI,QAAxB,e,GA9FwBS,IAAMC","file":"component---src-templates-posts-js-68927204b86b178f3341.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport Container from \"../components/container\"\nimport { graphql, Link } from \"gatsby\"\n\nexport default class BlogList extends React.Component {\n  render() {\n    const posts = this.props.data.allContentfulPost.nodes\n    const { currentPage, numPages } = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage =\n      currentPage - 1 === 1 ? \"/blog\" : \"/blog/\" + (currentPage - 1).toString()\n    const nextPage = \"/blog/\" + (currentPage + 1).toString()\n    const startCountIndex = numPages > 5 ? currentPage - 2 - 1 - isLast : 0\n    const endCountIndex = numPages > 5 ? currentPage + 2 + isFirst : numPages\n    return (\n      <Layout>\n        <Container>\n          <h1>Všechny příspěvky</h1>\n          {posts.map(node => (\n            <Link className=\"post-link\" to={`/${node.slug}`}>\n              <div\n                className=\"post\"\n                style={{ margin: \"3rem 0\" }}\n                key={node.slug}\n              >\n                <h2 style={{ margin: \"1rem 0\" }}>{node.title}</h2>\n                <div className=\"post-container\">\n                  <div className=\"post-text-container\">\n                    <p>\n                      <strong>{node.createdAt}</strong> • {node.description}\n                    </p>\n                    <Link\n                      className=\"post-link link-important\"\n                      to={`/${node.slug}`}\n                    >\n                      Zobrazit příspěvek &#8594;\n                    </Link>\n                  </div>\n\n                  {node.thumbnail != null && (\n                    <picture>\n                      <source\n                        srcset={node.thumbnail.fixed.srcSetWebp}\n                        type=\"image/webp\"\n                      />\n                      <source\n                        srcset={node.thumbnail.fixed.srcSet}\n                        type=\"image/jpeg\"\n                      />\n                      <img src={node.thumbnail.fixed.src} alt={node.title} />\n                    </picture>\n                  )}\n                </div>\n              </div>\n            </Link>\n          ))}\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            {isFirst ? (\n              <span style={{ color: \"transparent\" }}>← Předchozí</span>\n            ) : (\n              <Link to={prevPage} rel=\"prev\">\n                ← Předchozí\n              </Link>\n            )}\n            <div>\n              {Array.from(\n                { length: numPages },\n                (_, i) =>\n                  startCountIndex <= i &&\n                  endCountIndex > i &&\n                  (currentPage === i + 1 ? (\n                    <Link\n                      style={{\n                        padding: \"0 10px\",\n                        backgroundColor: \"#002868\",\n                        color: \"#fff\",\n                        borderRadius: 5,\n                      }}\n                      key={`pagination-number${i + 1}`}\n                      to={`${i === 0 ? \"/blog\" : \"/blog/\" + (i + 1)}`}\n                    >\n                      {i + 1}\n                    </Link>\n                  ) : (\n                    <Link\n                      style={{ padding: \"0 10px\" }}\n                      key={`pagination-number${i + 1}`}\n                      to={`${i === 0 ? \"/blog\" : \"/blog/\" + (i + 1)}`}\n                    >\n                      {i + 1}\n                    </Link>\n                  ))\n              )}\n            </div>\n            {isLast ? (\n              <span style={{ color: \"transparent\" }}>Další →</span>\n            ) : (\n              <Link to={nextPage} rel=\"next\">\n                Další →\n              </Link>\n            )}\n          </div>\n        </Container>\n      </Layout>\n    )\n  }\n}\n\nexport const data = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    allContentfulPost(\n      limit: $limit\n      skip: $skip\n      sort: { fields: createdAt, order: DESC }\n    ) {\n      nodes {\n        description\n        createdAt(formatString: \"D. MMMM YYYY\", locale: \"cs\")\n        slug\n        title\n        thumbnail {\n          fixed(quality: 75, width: 200) {\n            src\n            srcSet\n            srcSetWebp\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}